* mom1-low.s12
	segment abs
* Definitioner för RTC-kretsen i HC12
CRGFLG 	equ $37
CRGINT 	equ $38
RTICTL 	equ $3B
* Flagga
RTIF 	equ $80
STKSIZE EQU $40 	stackutrymmen för program
* Datadeklarationer
	segment	bss
*'STKSIZE' bytes stackutrymme för 'producer'
	RMB STKSIZE-1
a_stack_producer RMB 1

*'STKSIZE' bytes stackutrymme för 'consumer'
	RMB STKSIZE-1
a_stack_consumer RMB 1

RUNNING RMB 1 anger exekverande program

* temporär lagring stackpekare för 'RUNNING'
current_sp RMB 2

* temporär lagring stackpekare för 'producer'
Producer_sp RMB 2

* temporär lagring stackpekare för 'consumer'
consumer_sp RMB 2

segment text 	starta KOD-segment

* Följande funktioner är definierade i 'mom1.c'
	extern _producer
	extern _consumer
*
* Programexekveringen startar här
*
	define _main
	entry _main
_main:
* init producer
	
	LDS #a_stack_producer
	LDX #_producer
	PSHX PC - till producer
	PSHY Y - innehållet är odefinierat
	PSHX X - innehållet är odefinierat
	PSHA A - innehållet är odefinierat
	PSHB B - innehållet är odefinierat
* sist placerar vi CCR för process 1, här måste I-flaggan
* vara 0 för att processbyten ska kunna utföras senare. Vi kan dock
* inte nollställa I-flaggan ännu, ty avbrottshanteringen är ännu inte
* fullständigt initierad, vi använder A-registret för att skapa ett
* CC-innehåll på stacken
	TPA CC -> A
	ANDA #%11101111 0 -> I-flagga
	PSHA
	STS Producer_sp
* init end	

* init consumer

	
	LDS #a_stack_consumer
	LDX #_consumer
	PSHX PC - till producer
	PSHY Y - innehållet är odefinierat
	PSHX X - innehållet är odefinierat
	PSHA A - innehållet är odefinierat
	PSHB B - innehållet är odefinierat
* sist placerar vi CCR för process 1, här måste I-flaggan
* vara 0 för att processbyten ska kunna utföras senare. Vi kan dock
* inte nollställa I-flaggan ännu, ty avbrottshanteringen är ännu inte
* fullständigt initierad, vi använder A-registret för att skapa ett
* CC-innehåll på stacken
	TPA CC -> A
	ANDA #%11101111 0 -> I-flagga
	PSHA
	STS consumer_sp
* init end

*init_RTC

* avbrottsvektor måste initieras under DBG12...
	LDX #timer_interrupt
	STX $3FF0 	Avbrottsvektor RTC
* men vi skriver den också till 'rätt' adress för
* att även kunna använda exemplet i simulatorn...
	STX $FFF0
* initiera RTC:n för önskad avbrottsfrekvens
*	MOVB #$49,RTICTL
	MOVB #$10,RTICTL
* tidsbas 10,24 ms, se exempel ovan
* initiera RTC
	MOVB #$80,CRGINT
* nollställ I-flagga så att avbrott accepteras
	CLI

*init end

* utför nu start av ’producer()’ så som
* ’timer_interrupt’ gör det...
	CLR	RUNNING
	LDS	Producer_sp
	RTI
	
	
timer_interrupt	LDD	0,SP
	STD	current_sp
	TST	RUNNING
	BNE	switch
	MOVB	current_sp,Producer_sp
	MOVB	#1,RUNNING
	MOVB	consumer_sp,current_sp
	JMP	restore
	
switch	MOVB	current_sp,consumer_sp
	CLR	RUNNING
	MOVB	Producer_sp,current_sp
	
restore	LDS	current_sp
	MOVB	#80,CRGFLG
	RTI
	

* Exekveringen kommer aldrig tillbaks hit...